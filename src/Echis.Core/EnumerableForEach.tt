<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

namespace System
{

    /// <summary>
    /// Provides extension methods for performing for each operations on enumerable collections.
    /// </summary>
	public static class EnumerableForEachExtensions
	{
<#

string targxml = "";
string argxml = "";
string generics = "";
string parameters = "";
string arguments = "";

for(int idx = 1; idx < 17; idx++)
{
#>
		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
<#= string.Format(targxml, "action", Environment.NewLine) #>		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
<#= string.Format(argxml, "action", Environment.NewLine) #>		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem<#= generics #>>(this IEnumerable<TItem> collection, Action<TItem<#= generics #>> action<#= parameters #>)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item<#= arguments #>);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
<#= string.Format(targxml, "function", Environment.NewLine) #>		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
<#= string.Format(argxml, "function", Environment.NewLine) #>		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem<#= generics #>, TResult>(this IEnumerable<TItem> collection, Func<TItem<#= generics #>, TResult> func<#= parameters #>)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item<#= arguments #>));
			}

			return retVal;
		}

<#
	argxml += string.Format("        /// <param name=\"arg{0}\">Argument {0} to be passed into the specified action.</param>{{1}}", idx);
	targxml += string.Format("        /// <typeparam name=\"TArg{0}\">The type of argument {0}.</typeparam>{{1}}", idx);
	generics += string.Format(", TArg{0}", idx);
	parameters += string.Format(", TArg{0} arg{0}", idx);
	arguments += string.Format(", arg{0}", idx);
}
#>
	}
}