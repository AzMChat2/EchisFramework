//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

namespace System
{

    /// <summary>
    /// Provides extension methods for performing for each operations on enumerable collections.
    /// </summary>
	public static class EnumerableForEachExtensions
	{
		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem>(this IEnumerable<TItem> collection, Action<TItem> action)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TResult>(this IEnumerable<TItem> collection, Func<TItem, TResult> func)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1>(this IEnumerable<TItem> collection, Action<TItem, TArg1> action, TArg1 arg1)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TResult> func, TArg1 arg1)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2> action, TArg1 arg1, TArg2 arg2)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TResult> func, TArg1 arg1, TArg2 arg2)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3> action, TArg1 arg1, TArg2 arg2, TArg3 arg3)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
        /// <typeparam name="TArg12">The type of argument 12.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
        /// <param name="arg12">Argument 12 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
        /// <typeparam name="TArg12">The type of argument 12.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
        /// <param name="arg12">Argument 12 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
        /// <typeparam name="TArg12">The type of argument 12.</typeparam>
        /// <typeparam name="TArg13">The type of argument 13.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
        /// <param name="arg12">Argument 12 to be passed into the specified action.</param>
        /// <param name="arg13">Argument 13 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
        /// <typeparam name="TArg12">The type of argument 12.</typeparam>
        /// <typeparam name="TArg13">The type of argument 13.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
        /// <param name="arg12">Argument 12 to be passed into the specified action.</param>
        /// <param name="arg13">Argument 13 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
        /// <typeparam name="TArg12">The type of argument 12.</typeparam>
        /// <typeparam name="TArg13">The type of argument 13.</typeparam>
        /// <typeparam name="TArg14">The type of argument 14.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
        /// <param name="arg12">Argument 12 to be passed into the specified action.</param>
        /// <param name="arg13">Argument 13 to be passed into the specified action.</param>
        /// <param name="arg14">Argument 14 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
        /// <typeparam name="TArg12">The type of argument 12.</typeparam>
        /// <typeparam name="TArg13">The type of argument 13.</typeparam>
        /// <typeparam name="TArg14">The type of argument 14.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
        /// <param name="arg12">Argument 12 to be passed into the specified action.</param>
        /// <param name="arg13">Argument 13 to be passed into the specified action.</param>
        /// <param name="arg14">Argument 14 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14));
			}

			return retVal;
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
        /// <typeparam name="TArg12">The type of argument 12.</typeparam>
        /// <typeparam name="TArg13">The type of argument 13.</typeparam>
        /// <typeparam name="TArg14">The type of argument 14.</typeparam>
        /// <typeparam name="TArg15">The type of argument 15.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="action">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
        /// <param name="arg12">Argument 12 to be passed into the specified action.</param>
        /// <param name="arg13">Argument 13 to be passed into the specified action.</param>
        /// <param name="arg14">Argument 14 to be passed into the specified action.</param>
        /// <param name="arg15">Argument 15 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static void ForEach<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this IEnumerable<TItem> collection, Action<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (action == null) throw new ArgumentNullException("action");

			foreach (TItem item in collection)
			{
				action(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
			}
		}

		/// <summary>
		/// Performs the specified action on each element of the collection.
		/// </summary>
		/// <typeparam name="TItem">The type of elements in the collection.</typeparam>
		/// <typeparam name="TResult">The type of elements in the result collection.</typeparam>
        /// <typeparam name="TArg1">The type of argument 1.</typeparam>
        /// <typeparam name="TArg2">The type of argument 2.</typeparam>
        /// <typeparam name="TArg3">The type of argument 3.</typeparam>
        /// <typeparam name="TArg4">The type of argument 4.</typeparam>
        /// <typeparam name="TArg5">The type of argument 5.</typeparam>
        /// <typeparam name="TArg6">The type of argument 6.</typeparam>
        /// <typeparam name="TArg7">The type of argument 7.</typeparam>
        /// <typeparam name="TArg8">The type of argument 8.</typeparam>
        /// <typeparam name="TArg9">The type of argument 9.</typeparam>
        /// <typeparam name="TArg10">The type of argument 10.</typeparam>
        /// <typeparam name="TArg11">The type of argument 11.</typeparam>
        /// <typeparam name="TArg12">The type of argument 12.</typeparam>
        /// <typeparam name="TArg13">The type of argument 13.</typeparam>
        /// <typeparam name="TArg14">The type of argument 14.</typeparam>
        /// <typeparam name="TArg15">The type of argument 15.</typeparam>
		/// <param name="collection">The collection of elements upon which the action will be performed.</param>
		/// <param name="func">The delegate to perform on each element of the collection.</param>
        /// <param name="arg1">Argument 1 to be passed into the specified action.</param>
        /// <param name="arg2">Argument 2 to be passed into the specified action.</param>
        /// <param name="arg3">Argument 3 to be passed into the specified action.</param>
        /// <param name="arg4">Argument 4 to be passed into the specified action.</param>
        /// <param name="arg5">Argument 5 to be passed into the specified action.</param>
        /// <param name="arg6">Argument 6 to be passed into the specified action.</param>
        /// <param name="arg7">Argument 7 to be passed into the specified action.</param>
        /// <param name="arg8">Argument 8 to be passed into the specified action.</param>
        /// <param name="arg9">Argument 9 to be passed into the specified action.</param>
        /// <param name="arg10">Argument 10 to be passed into the specified action.</param>
        /// <param name="arg11">Argument 11 to be passed into the specified action.</param>
        /// <param name="arg12">Argument 12 to be passed into the specified action.</param>
        /// <param name="arg13">Argument 13 to be passed into the specified action.</param>
        /// <param name="arg14">Argument 14 to be passed into the specified action.</param>
        /// <param name="arg15">Argument 15 to be passed into the specified action.</param>
		/// <exception cref="System.ArgumentNullException">System.ArgumentNullException</exception>
		public static List<TResult> ForEachReturn<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>(this IEnumerable<TItem> collection, Func<TItem, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult> func, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15)
		{
			if (collection == null) throw new ArgumentNullException("collection");
			if (func == null) throw new ArgumentNullException("func");

			var retVal = new List<TResult>();

			foreach (TItem item in collection)
			{
				retVal.Add(func(item, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15));
			}

			return retVal;
		}

	}
}