//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//
//		Manual changes to this file may cause unexpected behavior in your application.
//		Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Reflection;
using System.Diagnostics.CodeAnalysis;

namespace System.Threading
{
	#region AsynchronousExecutor
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	public class AsynchronousExecutor : AsynchronousExecutorBase
	{
		#region Static Methods
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="executor">The Asynchronous Executor to be executed.</param>
		private static void Execute(EventHandler success, EventHandler<ExceptionEventArgs> error, AsynchronousExecutorBase executor)
		{
			if (success != null) executor.Success += success;
			if (error != null) executor.Error += error;
			
			executor.Execute();
		}
		
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		public static void Execute(Action action)
		{
			Execute(action, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		public static void Execute(Action action, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor(action));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		public static void Execute<TArg1>(Action<TArg1> action, TArg1 arg1)
		{
			Execute(action, arg1, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		public static void Execute<TArg1>(Action<TArg1> action, TArg1 arg1, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1>(action, arg1));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2>(Action<TArg1, TArg2> action, TArg1 arg1, TArg2 arg2)
		{
			Execute(action, arg1, arg2, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2>(Action<TArg1, TArg2> action, TArg1 arg1, TArg2 arg2, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2>(action, arg1, arg2));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3>(Action<TArg1, TArg2, TArg3> action, TArg1 arg1, TArg2 arg2, TArg3 arg3)
		{
			Execute(action, arg1, arg2, arg3, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3>(Action<TArg1, TArg2, TArg3> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3>(action, arg1, arg2, arg3));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4>(Action<TArg1, TArg2, TArg3, TArg4> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4)
		{
			Execute(action, arg1, arg2, arg3, arg4, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4>(Action<TArg1, TArg2, TArg3, TArg4> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4>(action, arg1, arg2, arg3, arg4));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5>(Action<TArg1, TArg2, TArg3, TArg4, TArg5> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5>(Action<TArg1, TArg2, TArg3, TArg4, TArg5> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5>(action, arg1, arg2, arg3, arg4, arg5));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(action, arg1, arg2, arg3, arg4, arg5, arg6));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		/// <param name="arg13">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		/// <param name="arg13">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		/// <param name="arg13">A parameter of the method to be executed.</param>
		/// <param name="arg14">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		/// <param name="arg13">A parameter of the method to be executed.</param>
		/// <param name="arg14">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14));
		}

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		/// <param name="arg13">A parameter of the method to be executed.</param>
		/// <param name="arg14">A parameter of the method to be executed.</param>
		/// <param name="arg15">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15)
		{
			Execute(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		/// <param name="arg13">A parameter of the method to be executed.</param>
		/// <param name="arg14">A parameter of the method to be executed.</param>
		/// <param name="arg15">A parameter of the method to be executed.</param>
		public static void Execute<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(action, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15));
		}
		#endregion
		
		#region Instance Members
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		public AsynchronousExecutor(Action action)
		{
			Action = action;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action Action { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke();
		}
		#endregion
	}
	#endregion

	#region AsynchronousExecutor<TArg1>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1> action, TArg1 arg1)
		{
			Action = action;
			Arg1 = arg1;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2> action, TArg1 arg1, TArg2 arg2)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3> action, TArg1 arg1, TArg2 arg2, TArg3 arg3)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
			Arg7 = arg7;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg7 Arg7 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
			Arg7 = arg7;
			Arg8 = arg8;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg7 Arg7 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg8 Arg8 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
			Arg7 = arg7;
			Arg8 = arg8;
			Arg9 = arg9;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg7 Arg7 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg8 Arg8 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg9 Arg9 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
			Arg7 = arg7;
			Arg8 = arg8;
			Arg9 = arg9;
			Arg10 = arg10;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg7 Arg7 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg8 Arg8 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg9 Arg9 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg10 Arg10 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
			Arg7 = arg7;
			Arg8 = arg8;
			Arg9 = arg9;
			Arg10 = arg10;
			Arg11 = arg11;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg7 Arg7 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg8 Arg8 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg9 Arg9 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg10 Arg10 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg11 Arg11 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
			Arg7 = arg7;
			Arg8 = arg8;
			Arg9 = arg9;
			Arg10 = arg10;
			Arg11 = arg11;
			Arg12 = arg12;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg7 Arg7 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg8 Arg8 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg9 Arg9 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg10 Arg10 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg11 Arg11 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg12 Arg12 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		/// <param name="arg13">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
			Arg7 = arg7;
			Arg8 = arg8;
			Arg9 = arg9;
			Arg10 = arg10;
			Arg11 = arg11;
			Arg12 = arg12;
			Arg13 = arg13;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg7 Arg7 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg8 Arg8 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg9 Arg9 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg10 Arg10 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg11 Arg11 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg12 Arg12 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg13 Arg13 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		/// <param name="arg13">A parameter of the method to be executed.</param>
		/// <param name="arg14">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
			Arg7 = arg7;
			Arg8 = arg8;
			Arg9 = arg9;
			Arg10 = arg10;
			Arg11 = arg11;
			Arg12 = arg12;
			Arg13 = arg13;
			Arg14 = arg14;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg7 Arg7 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg8 Arg8 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg9 Arg9 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg10 Arg10 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg11 Arg11 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg12 Arg12 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg13 Arg13 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg14 Arg14 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14);
		}
	}
	#endregion

	#region AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		/// <param name="arg1">A parameter of the method to be executed.</param>
		/// <param name="arg2">A parameter of the method to be executed.</param>
		/// <param name="arg3">A parameter of the method to be executed.</param>
		/// <param name="arg4">A parameter of the method to be executed.</param>
		/// <param name="arg5">A parameter of the method to be executed.</param>
		/// <param name="arg6">A parameter of the method to be executed.</param>
		/// <param name="arg7">A parameter of the method to be executed.</param>
		/// <param name="arg8">A parameter of the method to be executed.</param>
		/// <param name="arg9">A parameter of the method to be executed.</param>
		/// <param name="arg10">A parameter of the method to be executed.</param>
		/// <param name="arg11">A parameter of the method to be executed.</param>
		/// <param name="arg12">A parameter of the method to be executed.</param>
		/// <param name="arg13">A parameter of the method to be executed.</param>
		/// <param name="arg14">A parameter of the method to be executed.</param>
		/// <param name="arg15">A parameter of the method to be executed.</param>
		public AsynchronousExecutor(Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> action, TArg1 arg1, TArg2 arg2, TArg3 arg3, TArg4 arg4, TArg5 arg5, TArg6 arg6, TArg7 arg7, TArg8 arg8, TArg9 arg9, TArg10 arg10, TArg11 arg11, TArg12 arg12, TArg13 arg13, TArg14 arg14, TArg15 arg15)
		{
			Action = action;
			Arg1 = arg1;
			Arg2 = arg2;
			Arg3 = arg3;
			Arg4 = arg4;
			Arg5 = arg5;
			Arg6 = arg6;
			Arg7 = arg7;
			Arg8 = arg8;
			Arg9 = arg9;
			Arg10 = arg10;
			Arg11 = arg11;
			Arg12 = arg12;
			Arg13 = arg13;
			Arg14 = arg14;
			Arg15 = arg15;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15> Action { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg1 Arg1 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg2 Arg2 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg3 Arg3 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg4 Arg4 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg5 Arg5 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg6 Arg6 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg7 Arg7 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg8 Arg8 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg9 Arg9 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg10 Arg10 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg11 Arg11 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg12 Arg12 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg13 Arg13 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg14 Arg14 { get; private set; }

		/// <summary>
		/// Gets the argument for the action.
		/// </summary>
		protected TArg15 Arg15 { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15);
		}
	}
	#endregion
	
	
}
