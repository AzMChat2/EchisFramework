<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#

WriteAutogeneratedWarning();

#>
using System.Reflection;
using System.Diagnostics.CodeAnalysis;

namespace System.Threading
{
	#region AsynchronousExecutor
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	public class AsynchronousExecutor : AsynchronousExecutorBase
	{
		#region Static Methods
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="executor">The Asynchronous Executor to be executed.</param>
		private static void Execute(EventHandler success, EventHandler<ExceptionEventArgs> error, AsynchronousExecutorBase executor)
		{
			if (success != null) executor.Success += success;
			if (error != null) executor.Error += error;
			
			executor.Execute();
		}
		
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		public static void Execute(Action action)
		{
			Execute(action, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param>
		public static void Execute(Action action, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor(action));
		}
<#
		string tArgs = "";
		string pArgs = "";
		string args = "";
		string doc = "";
		
		for(int idx = 1; idx <= 15; idx++)
		{
			if (tArgs.Length != 0) tArgs += ", ";
			tArgs += "TArg" + idx.ToString();
			
			pArgs += ", TArg" + idx.ToString() + " arg" + idx.ToString();
			args += ", arg" + idx.ToString();
			
			doc += "\r\n\t\t/// <param name=\"arg" + idx.ToString() + "\">A parameter of the method to be executed.</param>";

#>

		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param><#= doc #>
		public static void Execute<<#= tArgs #>>(Action<<#= tArgs #>> action<#=  pArgs #>)
		{
			Execute(action<#= args #>, null, null);
		}
		/// <summary>
		/// Executes an Action asychronously.
		/// </summary>
		/// <param name="success">A callback method to be called upon a successful execution of the action.</param>
		/// <param name="error">A callbaxk method to be called upon a failure during execution of the action.</param>
		/// <param name="action">The action to be performed on a background thread.</param><#= doc #>
		public static void Execute<<#= tArgs #>>(Action<<#= tArgs #>> action<#=  pArgs #>, EventHandler success, EventHandler<ExceptionEventArgs> error)
		{
			Execute(success, error, new AsynchronousExecutor<<#= tArgs #>>(action<#= args #>));
		}
<#
		}
#>
		#endregion
		
		#region Instance Members
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param>
		public AsynchronousExecutor(Action action)
		{
			Action = action;
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action Action { get; private set; }

		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke();
		}
		#endregion
	}
	#endregion
<#
		tArgs = "";
		pArgs = "";
		args = "";
		doc = "";
		string props = "";
		string pSets = "";
		
		for(int idx = 1; idx <= 15; idx++)
		{
			if (tArgs.Length != 0) tArgs += ", ";
			if (args.Length != 0) args += ", ";
			
			tArgs += "TArg" + idx.ToString();
			pArgs += ", TArg" + idx.ToString() + " arg" + idx.ToString();
			args += "Arg" + idx.ToString();
			
			props += "\r\n\t\t/// <summary>\r\n";
			props += "\t\t/// Gets the argument for the action.\r\n";
			props += "\t\t/// </summary>\r\n";
			props += "\t\tprotected TArg" + idx.ToString() +  " Arg" + idx.ToString() +  " { get; private set; }\r\n";

			pSets += "\r\n\t\t\tArg" + idx.ToString() + " = arg" + idx.ToString() + ";";
			doc += "\r\n\t\t/// <param name=\"arg" + idx.ToString() + "\">A parameter of the method to be executed.</param>";

#>

	#region AsynchronousExecutor<<#= tArgs #>>
	/// <summary>
	/// Executes an action on a background thread.
	/// </summary>
	[SuppressMessage("Microsoft.Design", "CA1005:AvoidExcessiveParametersOnGenericTypes")]
	public class AsynchronousExecutor<<#= tArgs #>> : AsynchronousExecutorBase
	{
		/// <summary>
		/// Constructor, creates an instance of the Asynchronous Executor.
		/// </summary>
		/// <param name="action">The action to be performed on a background thread.</param><#= doc #>
		public AsynchronousExecutor(Action<<#= tArgs #>> action<#=  pArgs #>)
		{
			Action = action;<#= pSets #>
		}
		
		/// <summary>
		/// Gets the action to be performed on a background thread.
		/// </summary>
		protected Action<<#= tArgs #>> Action { get; private set; }
<#= props #>
		/// <summary>
		/// Gets the method information about the action to be invoked.
		/// </summary>
		protected override MethodInfo Method { get { return Action.Method; } }

		/// <summary>
		/// Invokes the action.
		/// </summary>
		protected override void InvokeAction()
		{
			Action.Invoke(<#= args #>);
		}
	}
	#endregion
<#
		}
#>
	
	
}
<#+

void WriteAutogeneratedWarning()
{
#>//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//
//		Manual changes to this file may cause unexpected behavior in your application.
//		Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#+
}
#>