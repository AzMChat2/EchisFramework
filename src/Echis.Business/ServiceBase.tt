<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension="generated.cs" #>
<#

WriteAutogeneratedWarning();

string exReturnXml = @"/// <summary>
		/// Executes an action against the context object and returns the return value of the action.
		/// </summary>
		/// <typeparam name=""TReturn"">The type of object returned from the action.</typeparam>
		/// <param name=""action"">The action to be executed</param>";

string exXml = @"/// <summary>
		/// Executes an action against the context object.
		/// </summary>
		/// <param name=""action"">The action to be executed</param>";

#>
using System;
using System.Data;
using System.Data.Objects;

namespace System.Data.Objects
{
	/// <summary>
	///	Service base class which provides Execute methods for accessing the Object Context.
	/// </summary>
	public abstract partial class ServiceBase<TContext>
		where TContext : ObjectContext, new()
	{
		#region Excute
		<#= exReturnXml #>
		protected TReturn ExecuteReturn<TReturn>(Func<TContext, TReturn> action)
		{
			if (action == null) throw new ArgumentNullException("action");

			try
			{
				using (TContext context = new TContext())
				{
					return action(context);
				}
			}
			catch(EntityCommandExecutionException)
			{
				using (TContext context = new TContext())
				{
					return action(context);
				}
			}
		}

		<#= exXml #>
		protected void Execute(Action<TContext> action)
		{
			if (action == null) throw new ArgumentNullException("action");

			try
			{
				using (TContext context = new TContext())
				{
					action(context);
				}
			}
			catch(EntityCommandExecutionException)
			{
				using (TContext context = new TContext())
				{
					action(context);
				}
			}
		}
<#
string declareList = string.Empty;
string argumentList = string.Empty;
string callList = string.Empty;
string newXml = string.Empty;
string posName = string.Empty;

for(int idx = 1; idx < 16; idx++)
{
	if (declareList.Length != 0) declareList += ", ";
	declareList += "TArg" + idx;
	argumentList += ", TArg" + idx + " arg" + idx;
	callList += ", arg" + idx;
	posName = _positionalNames[idx];

	newXml = @"
		/// <typeparam name=""TArg" + idx + @""">The type of the " + posName + @" argument of the method.</typeparam>
		/// <param name=""arg" + idx + @""">The value of the " + posName + @" argument of the method.</param>";
	exReturnXml += newXml;
	exXml += newXml;
#>
		<#= exReturnXml #>
		protected TReturn ExecuteReturn<TReturn, <#= declareList #>>(Func<TContext, <#= declareList #>, TReturn> action<#= argumentList #>)
		{
			if (action == null) throw new ArgumentNullException("action");

			try
			{
				using (TContext context = new TContext())
				{
					return action(context<#= callList #>);
				}
			}
			catch(EntityCommandExecutionException)
			{
				using (TContext context = new TContext())
				{
					return action(context<#= callList #>);
				}
			}
		}

		<#= exXml #>
		protected void Execute<<#= declareList #>>(Action<TContext, <#= declareList #>> action<#= argumentList #>)
		{
			if (action == null) throw new ArgumentNullException("action");

			try
			{
				using (TContext context = new TContext())
				{
					action(context<#= callList #>);
				}
			}
			catch(EntityCommandExecutionException)
			{
				using (TContext context = new TContext())
				{
					action(context<#= callList #>);
				}
			}
		}
<#
}
#>
		#endregion
	}
}
<#+

void WriteAutogeneratedWarning()
{
#>//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated from a template.
//
//		Manual changes to this file may cause unexpected behavior in your application.
//		Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#+
}

string[] _positionalNames =
	{
		"",
		"First",
		"Second",
		"Third",
		"Fourth",
		"Fifth",
		"Sixth",
		"Seventh",
		"Eighth",
		"Ninth",
		"Tenth",
		"Eleventh",
		"Twelfth",
		"Thirteenth",
		"Fourteenth",
		"Fifteenth",
		"Sixteenth",
		"Seventeenth",
		"Eighteenth",
		"Nineteenth",
		"Twentieth"
	};
#>
